/var/spool/slurm/slurmd/state/job19839685/slurm_script: line 11: conda: command not found
Many modules are hidden in this stack. Use "module --show_hidden spider SOFTWARE" if you are not able to find the required software

Due to MODULEPATH changes, the following have been reloaded:
  1) hdf5/1.14.3     2) r/4.3.2

The following have been reloaded with a version change:
  1) cuda/12.2.1 => cuda/12.1.1     3) python/3.11.6_cuda => python/3.11.6
  2) gcc/13.2.0 => gcc/12.2.0       4) stack/2024-05 => stack/2024-06

/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/torch/cuda/__init__.py:716: UserWarning: Can't initialize NVML
  warnings.warn("Can't initialize NVML")
Downloading https://raw.githubusercontent.com/stanfordnlp/stanza-resources/main/resources_1.9.0.json:   0%| | 0.00/48.Downloading https://raw.githubusercontent.com/stanfordnlp/stanza-resources/main/resources_1.9.0.json: 392kB [00:00, 53.3MB/s]
2025-01-04 14:17:36 INFO: Downloaded file to /cluster/home/gcardenal/stanza_resources/resources.json
2025-01-04 14:17:36 INFO: Downloading these customized packages for language: en (English)...
====================================
| Processor       | Package        |
------------------------------------
| tokenize        | mimic          |
| pos             | mimic_charlm   |
| lemma           | mimic_nocharlm |
| pretrain        | mimic          |
| forward_charlm  | mimic          |
| backward_charlm | mimic          |
====================================

2025-01-04 14:17:36 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/tokenize/mimic.pt
2025-01-04 14:17:36 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/pos/mimic_charlm.pt
2025-01-04 14:17:36 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/lemma/mimic_nocharlm.pt
2025-01-04 14:17:37 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/pretrain/mimic.pt
2025-01-04 14:17:37 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/forward_charlm/mimic.pt
2025-01-04 14:17:37 INFO: File exists: /cluster/home/gcardenal/stanza_resources/en/backward_charlm/mimic.pt
2025-01-04 14:17:37 INFO: Finished downloading models and saved to /cluster/home/gcardenal/stanza_resources
2025-01-04 14:17:37 INFO: Checking for updates to resources.json in case models have been updated.  Note: this behavior can be turned off with download_method=None or download_method=DownloadMethod.REUSE_RESOURCES
Downloading https://raw.githubusercontent.com/stanfordnlp/stanza-resources/main/resources_1.9.0.json:   0%| | 0.00/48.Downloading https://raw.githubusercontent.com/stanfordnlp/stanza-resources/main/resources_1.9.0.json: 392kB [00:00, 32.4MB/s]
2025-01-04 14:17:37 INFO: Downloaded file to /cluster/home/gcardenal/stanza_resources/resources.json
2025-01-04 14:17:37 INFO: Loading these models for language: en (English):
==============================
| Processor | Package        |
------------------------------
| tokenize  | mimic          |
| pos       | mimic_charlm   |
| lemma     | mimic_nocharlm |
==============================

2025-01-04 14:17:37 INFO: Using device: cpu
2025-01-04 14:17:37 INFO: Loading: tokenize
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/stanza/models/tokenization/trainer.py:82: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(filename, lambda storage, loc: storage)
2025-01-04 14:17:39 INFO: Loading: pos
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/stanza/models/pos/trainer.py:139: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(filename, lambda storage, loc: storage)
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/stanza/models/common/pretrain.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  data = torch.load(self.filename, lambda storage, loc: storage)
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/stanza/models/common/char_model.py:271: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state = torch.load(filename, lambda storage, loc: storage)
2025-01-04 14:17:40 INFO: Loading: lemma
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/stanza/models/lemma/trainer.py:239: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(filename, lambda storage, loc: storage)
2025-01-04 14:17:40 INFO: Done loading processors!
/cluster/home/gcardenal/miniconda3/envs/scispacy_env/lib/python3.9/site-packages/spacy/language.py:2195: FutureWarning: Possible set union at position 6328
  deserializers["tokenizer"] = lambda p: self.tokenizer.from_disk(  # type: ignore[union-attr]
slurmstepd: error: *** JOB 19839685 ON eu-g9-026-2 CANCELLED AT 2025-01-04T14:51:11 ***
